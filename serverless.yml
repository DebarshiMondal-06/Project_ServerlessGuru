service: sls-watch-crud-app

frameworkVersion: '3'

# define IAM roles per function... 
plugins:
   - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs16.x
  region: us-west-2
  stage: ${opt:stage, 'DEV'} #to support multi-stage deployment Stack, default is DEV.


# for more control over your function artifacts...
package:
  individually: true #to package functions individually.
  patterns:
    - '!node_modules/**'
    - '!package.json'
    - '!functions/**'
    - '!layers/**'
    - '!screenshots/**'
    - '!Frontend/**'


# layers configuration...
layers: 
  nano:
    package:
      artifact: layers/nanoId.zip #path to layer artificat.
    name: ${opt:stage}-nanoID
    compatibleRuntimes:
      - nodejs16.x
    compatibleArchitectures:
      - x86_64
      - arm64

# Lambda functions configuration...
functions:
  createWatchFun: #create watch lambda function.
    name: CreateWatchFun-${opt:stage} 
    handler: functions/create_watch.create #path to handler, here `create_watch` is file name and `.create` is method
    environment:
      WATCH_TABLE: !Ref watchTable #!Ref returns the value of the dynamodb table name.
    package:
      patterns:
        - 'functions/create_watch.js'
    layers:
      - !Ref NanoLambdaLayer 
    events: #api-gateway event...
      - http:
          path: /create
          method: POST
          cors: true 
    iamRoleStatements: #giving granular access.
      - Effect: Allow        
        Action:
          - dynamodb:PutItem
        Resource: 
          - { Fn::GetAtt: [watchTable, Arn] } #getting the arn for the resource watchTable.


  getAllWatchFun: #get all watch lambda function.
    name: GetAllWatchFun-${opt:stage}
    handler: functions/getall_watch.get_all
    environment:
      WATCH_TABLE: !Ref watchTable
    package:
      patterns:
        - 'functions/getall_watch.js'
    events:
      - http:
          path: /get_all
          method: GET
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: 
          - { Fn::GetAtt: [watchTable, Arn] }
    

  updateWatchFun: #update a watch lambda function.
    name: UpdateWatchFun-${opt:stage}
    handler: functions/update_watch.update
    environment:
      WATCH_TABLE: !Ref watchTable
    package:
      patterns:
        - 'functions/update_watch.js'
    events:
      - http:
          path: /update
          method: PUT
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: 
          - { Fn::GetAtt: [watchTable, Arn] }
    
  
  deleteWatchFun: #delete watch lambda function.
    name: DeleteWatchFun-${opt:stage}
    handler: functions/delete_watch.delete
    environment:
      WATCH_TABLE: !Ref watchTable
    package:
      patterns:
        - 'functions/delete_watch.js'
    events:
      - http:
          path: /delete
          method: DELETE
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: 
          - { Fn::GetAtt: [watchTable, Arn] }
    

  categoryWatchFun: #get by watch category lambda function.
    name: CategoryWatchFun-${opt:stage}
    handler: functions/getby_category.watch_category
    environment:
      WATCH_TABLE: !Ref watchTable
    package:
      patterns:
        - 'functions/getby_category.js'
    events:
      - http:
          path: /watch_category
          method: GET
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: 
          - !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/Watch_Table-${opt:stage}/index/* 
          - { Fn::GetAtt: [watchTable, Arn] }




resources:
  Resources: 
    watchTable: #DynamoDB watch table configuration.
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: Watch_Table-${opt:stage}
        BillingMode: PAY_PER_REQUEST  #for billing mode On Demand.
        AttributeDefinitions:
          - AttributeName: "watch_id"
            AttributeType: "N"
          - AttributeName: "category"
            AttributeType: "S" 
        KeySchema:
          - AttributeName: "watch_id"
            KeyType: "HASH" #partion key
        GlobalSecondaryIndexes: #configure GSI
          - IndexName: category-index
            KeySchema:
              - AttributeName: category
                KeyType: HASH
            Projection:
              ProjectionType: ALL #return all attributes for this index.
