service: sls-watch-graphql-02

frameworkVersion: '3'

plugins:
   - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs16.x
  region: us-west-2
  stage: ${opt:stage, 'dev'}

package:
  individually: true
  patterns:
    - '!node_modules/**'
    - '!package.json'
    - '!functions/**'
    - '!layers/**'
    - '!Frontend/**'

	
layers:
  nano:
    package:
      artifact: layers/nanoId.zip
    name: ${opt:stage}-nanoID
    compatibleRuntimes:
      - nodejs16.x
    compatibleArchitectures:
      - x86_64
      - arm64

functions:
  createWatchFun:
    name: CreateWatchFun-${opt:stage}
    handler: functions/create_watch.create
    environment:
      WATCH_TABLE: !Ref watchTable
    package:
      patterns:
        - 'functions/create_watch.js'
    layers:
      - !Ref NanoLambdaLayer
    events:
      - http:
          path: /create
          method: POST
          cors: true
    iamRoleStatements:
      - Effect: Allow        
        Action:
          - dynamodb:PutItem
        Resource: 
          - { Fn::GetAtt: [watchTable, Arn] }


  getAllWatchFun:
    name: GetAllWatchFun-${opt:stage}
    handler: functions/getall_watch.get_all
    environment:
      WATCH_TABLE: !Ref watchTable
    package:
      patterns:
        - 'functions/getall_watch.js'
    events:
      - http:
          path: /get_all
          method: GET
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: 
          - { Fn::GetAtt: [watchTable, Arn] }
    

  updateWatchFun:
    name: UpdateWatchFun-${opt:stage}
    handler: functions/update_watch.update
    environment:
      WATCH_TABLE: !Ref watchTable
    package:
      patterns:
        - 'functions/update_watch.js'
    events:
      - http:
          path: /update
          method: PUT
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: 
          - { Fn::GetAtt: [watchTable, Arn] }
    
  
  deleteWatchFun:
    name: DeleteWatchFun-${opt:stage}
    handler: functions/delete_watch.delete
    environment:
      WATCH_TABLE: !Ref watchTable
    package:
      patterns:
        - 'functions/delete_watch.js'
    events:
      - http:
          path: /delete
          method: DELETE
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: 
          - { Fn::GetAtt: [watchTable, Arn] }
    

  categoryWatchFun:
    name: CategoryWatchFun-${opt:stage}
    handler: functions/getby_category.watch_category
    environment:
      WATCH_TABLE: !Ref watchTable
    package:
      patterns:
        - 'functions/getby_category.js'
    events:
      - http:
          path: /watch_category
          method: GET
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: 
          - !Sub arn:aws:dynamodb:${self:provider.region}:${AWS::AccountId}:table/Watch_Table-${opt:stage}/index/*
          - { Fn::GetAtt: [watchTable, Arn] }




resources:
  Resources:
    watchTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: Watch_Table-${opt:stage}
        BillingMode: PAY_PER_REQUEST  
        AttributeDefinitions:
          - AttributeName: "watch_id"
            AttributeType: "N"
          - AttributeName: "category"
            AttributeType: "S" 
        KeySchema:
          - AttributeName: "watch_id"
            KeyType: "HASH"
        GlobalSecondaryIndexes:
          - IndexName: category-index
            KeySchema:
              - AttributeName: category
                KeyType: HASH
            Projection:
              ProjectionType: ALL